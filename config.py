from dotenv import load_dotenv
import os
from supabase import create_client, Client
from telegram import Bot

load_dotenv()

telegram_token = os.getenv("TELEGRAM_TOKEN")
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_KEY")
broker_telegram_token = os.getenv("BROKER_TELEGRAM_TOKEN")
BROKER_CHAT_ID = int(os.getenv("BROKER_CHAT_ID", "0"))

if not all([supabase_url, supabase_key, broker_telegram_token, BROKER_CHAT_ID]):
    raise ValueError("‚ùå Missing environment variables in .env")

supabase: Client = create_client(supabase_url, supabase_key)
broker_bot = Bot(token=broker_telegram_token)


def save_application(user_id: int, app_type: str, data: dict):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–∞—è–≤–∫—É —É —Ç–∞–±–ª–∏—Ü—é applications."""
    return supabase.table("applications").insert({
        "user_id": user_id,
        "application_type": app_type,
        **data
    }).execute()


async def send_to_broker(user_id: int, app_type: str, data: dict):
    titles = {
        "domestic": "üöõ –ó–∞—è–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ",
        "international": "üåç –Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç",
        "carrier": "üöö –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫",
    }
    title = titles.get(app_type, "üì® –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞")

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∫–ª—é—á—ñ
    keys_to_skip = ["step", "cerrier_or_customer", "type_of_delivery"]
    clean_data = {k: v for k, v in data.items() if k not in keys_to_skip}

    # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–ø–∏—Å–∏
    labels_uk = {
        "city": "–ú—ñ—Å—Ç–æ –∑–∞–±–æ—Ä—É",
        "datetime": "–î–∞—Ç–∞ —Ç–∞ —á–∞—Å",
        "cargo_type": "–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É",
        "weight": "–í–∞–≥–∞ (–∫–≥)",
        "capacity": "–û–±'—î–º",
        "requirements": "–û—Å–æ–±–ª–∏–≤—ñ –≤–∏–º–æ–≥–∏",
        "contacts": "–ö–æ–Ω—Ç–∞–∫—Ç–∏",
        "delivery_place": "–ú—ñ—Å—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏",
        "customs_point": "–ú–∏—Ç–Ω–∏–π –ø—É–Ω–∫—Ç",
        "specific_transportation_type": "–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è",
        "required_documents": "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏",
        "settlements_currency": "–í–∞–ª—é—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É",
        "customs_contact_person": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞ –Ω–∞ –º–∏—Ç–Ω–∏—Ü—ñ",
        "company_name": "–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó",
        "number_of_cars": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ",
        "transportation_countries": "–ö—Ä–∞—ó–Ω–∏ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è"
    }

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
    text_lines = []
    for k, v in clean_data.items():
        label = labels_uk.get(k, k)
        text_lines.append(f"<b>{label}</b>: {v}")

    text = f"<b>{title}</b>\n\n" + "\n".join(text_lines)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –±—Ä–æ–∫–µ—Ä—É
    try:
        await broker_bot.send_message(chat_id=BROKER_CHAT_ID, text=text, parse_mode="HTML")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –±—Ä–æ–∫–µ—Ä—É: {e}")
