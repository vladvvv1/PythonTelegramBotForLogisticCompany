from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    CommandHandler, 
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

ASK_TYPE, ASK_INTERNAL_CITY, ASK_INTERNAL_DATE, ASK_IMPORT_MODE = range(4)

async def start_carrier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üîπ –ö–æ–º–∞–Ω–¥–∞ /carrier –æ—Ç—Ä–∏–º–∞–Ω–∞")
    keyboard = [["–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è", "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è: ", reply_markup=markup)
    return ASK_TYPE

async def handle_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    print(f"üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤: {choice}")
    context.user_data["type"] = choice

    if choice == "–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è":
        print("üîπ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ ASK_INTERNAL_CITY")
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–∞–±–æ—Ä—É: ")
        return ASK_INTERNAL_CITY
    
    elif choice == "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç":
        print("üîπ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ ASK_IMPORT_MODE")
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: ")
        return ASK_IMPORT_MODE
    else:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ASK_TYPE

async def handle_internal_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    print(f"üîπ –ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ: {city}")
    context.user_data["city"] = city
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: ")
    return ASK_INTERNAL_DATE

async def handle_internal_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = update.message.text
    print(f"üîπ –î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞: {date}")
    context.user_data["date"] = date
    
    summary = (
        f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!\n"
        f"–¢–∏–ø: {context.user_data['type']}\n"
        f"–ú—ñ—Å—Ç–æ: {context.user_data['city']}\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}"
    )
    await update.message.reply_text(summary)
    print("üîπ –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return ConversationHandler.END

async def handle_import_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = update.message.text
    print(f"üîπ –ö—Ä–∞—ó–Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞: {mode}")
    context.user_data["mode"] = mode
    
    summary = f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!\n–¢–∏–ø: {context.user_data['type']}\n–ö—Ä–∞—ó–Ω–∞: {mode}"
    await update.message.reply_text(summary)
    print("üîπ –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–æ–∑–º–æ–≤–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞")
    context.user_data.clear()
    return ConversationHandler.END

def get_carrier_handler():
    print("üîπ Carrier handler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    return ConversationHandler(
        entry_points=[CommandHandler("carrier", start_carrier)],
        states={
            ASK_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_type)
            ],
            ASK_INTERNAL_CITY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_internal_city)
            ],
            ASK_INTERNAL_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_internal_date)
            ],
            ASK_IMPORT_MODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_import_mode)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )