import time
import re
from datetime import datetime
from telegram.error import NetworkError, TimedOut
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    ConversationHandler,
    CommandHandler,
    filters,
    ContextTypes, 
    MessageHandler,
    TypeHandler,
)
from config import save_application, send_to_broker
from config import telegram_token
import traceback

ASK_TYPE, SELECT_CARRIER_OR_CUSTOMER, ASK_TYPE2, AFTER_APPLICATION, HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_1, HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_2, EDITED_MESSAGE_HANDLER = range(7)
CUSTOMER_OR_CERRIER = 0

QUESTIONS1 = (
    ("city", "–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–∞–±–æ—Ä—É (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä):"),
    ("datetime", "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å:"),
    ("cargo_type", "–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É:"),
    ("weight", "–í–∞–≥–∞ (–∫–≥):"),
    ("capacity", "–û–±'—î–º:"),
    ("requirements", "–û—Å–æ–±–ª–∏–≤—ñ –≤–∏–º–æ–≥–∏:"),
    ("contacts", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "),
    ("delivery_place", "–ú—ñ—Å—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏: "),
)

QUESTIONS2 = (
    ("city", "–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –∑–∞–±–æ—Ä—É (–∫—Ä–∞—ó–Ω–∞, –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä):"),
    ("datetime", "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å:"),
    ("cargo_type", "–¢–∏–ø –≤–∞–Ω—Ç–∞–∂—É:"),
    ("weight", "–í–∞–≥–∞ (–∫–≥):"),
    ("capacity", "–û–±'—î–º:"),
    ("requirements", "–û—Å–æ–±–ª–∏–≤—ñ –≤–∏–º–æ–≥–∏:"),
    ("contacts", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "),
    ("delivery_place", "–ú—ñ—Å—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏: "),
    ("customs_point", "–ú–∏—Ç–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥: "),
    ("specific_transportation_type", "–ú–∏—Ç–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω–∞–ª: "),
    ("required_documents", "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏: "),
    ("settlements_currency", "–í–∞–ª—é—Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: "),
    ("customs_contact_person", "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ –æ—Å–æ–±–∞ –Ω–∞ –º–∏—Ç–Ω–∏—Ü—ñ: "),
)

QUESTIONS3 = (
    ("company_name", "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ—Ä–º–∏: "),
    ("number_of_cars", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ: "),
    ("transportation_countries", "–ö—Ä–∞—ó–Ω–∏, –≤ —è–∫—ñ –∑–¥—ñ–π—Å–Ω—é—é—Ç—å—Å—è –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è (–∞–±–æ –ø—Ä–æ—Å—Ç–æ –£–∫—Ä–∞—ó–Ω–∞): "),
    ("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç–∏: ")
)

back_keyboard = ReplyKeyboardMarkup([["‚è™ –ù–∞–∑–∞–¥"]], resize_keyboard=True)

def is_valid_number(text):
    try:
        return float(text) > 0
    except ValueError:
        return False

def is_valid_phone(text):
    return bool(re.match(r"^\+?\d{10,15}$", text))

def is_valid_datetime(text):
    try:
        datetime.strptime(text, "%d.%m.%Y %H:%M")
        return True
    except ValueError:
        return False

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    error = context.error
    user_id = update.effective_user.id if update and hasattr(update, 'effective_user') else None
    
    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {type(error).__name__}: {error}")
    
    with open("bot_errors.log", "a", encoding="utf-8") as f:
        f.write(f"\n{datetime.now()} - User {user_id}:\n")
        traceback.print_exception(type(error), error, error.__traceback__, file=f)

    error_message = "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    
    if isinstance(error, NetworkError):
        error_message = "üîå –ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
    elif isinstance(error, TimedOut):
        error_message = "‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    
    try:
        if update and hasattr(update, "message") and update.message:
            await update.message.reply_text(error_message)
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    print("BOT STARTED!")
    keyboard = [["–ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫", "–ó–∞–º–æ–≤–Ω–∏–∫"]]

    await update.message.reply_text("–í—ñ—Ç–∞—é –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ. –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏.", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))

    return SELECT_CARRIER_OR_CUSTOMER

async def SelectCarrierOrCustomer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.edited_message:
        await update.edited_message.reply_text("‚ö†Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ.")
        return ASK_TYPE
        
    choice = update.message.text
    context.user_data["cerrier_or_customer"] = choice
    print(choice)

    if choice == "–ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫":

        keyboard = [["–ü–æ –£–∫—Ä–∞—ó–Ω—ñ", "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç"]]

        await update.message.reply_text(
                "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è: ",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard, one_time_keyboard=True, resize_keyboard=True
                )
            )
        
        return HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_1
        
    elif choice == "–ó–∞–º–æ–≤–Ω–∏–∫":

        keyboard = [["–ü–æ –£–∫—Ä–∞—ó–Ω—ñ", "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç"]]

        await update.message.reply_text(
                "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è: ",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard, one_time_keyboard=True, resize_keyboard=True
                )
            )
        
        return HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_2
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç —ñ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return SELECT_CARRIER_OR_CUSTOMER
    
async def HandleTypeOfDeliveryAskTYPE1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    if update.edited_message:
        await update.edited_message.reply_text("‚ö†Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ.")
        return ASK_TYPE
    
    user_input = update.message.text
    print("Handle ytpe of delivery ask type 1 USER_INPUT: ", user_input)

    if user_input in ("–ü–æ –£–∫—Ä–∞—ó–Ω—ñ", "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç"):
        context.user_data["step"] = 0
        context.user_data["type_of_delivery"] = user_input
        print("Context user_data: ", context.user_data["type_of_delivery"])
        return await AskNext1(update, context)    
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤..")
        return HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_1

async def HandleTypeOfDeliveryAskTYPE2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    print(user_input)
    context.user_data["type_of_delivery"] = user_input

    if user_input == "–ü–æ –£–∫—Ä–∞—ó–Ω—ñ":
        context.user_data["QUESTIONS"] = QUESTIONS1
        context.user_data["step"] = 0
        return await AskNext2(update, context)
    elif user_input == "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç":
        context.user_data["QUESTIONS"] = QUESTIONS2
        context.user_data["step"] = 0
        return await AskNext2(update, context)
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤..")
        return HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_2
   
async def AskNext1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    if update.edited_message:
        await update.edited_message.reply_text("‚ö†Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ.")
        return ASK_TYPE

    if not update.message or not update.message.text:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —â–µ —Ä–∞–∑")
        return ASK_TYPE
    
    if update.message.text == "‚è™ –ù–∞–∑–∞–¥":
        current_step = context.user_data.get("step", 0)

        if current_step > 1:
            
            context.user_data["step"] = current_step - 1
            prev_key, prev_question = QUESTIONS3[current_step - 2]
            await update.message.reply_text(
                f"üîô –î–æ–±—Ä–µ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å.\n\n{prev_question}",
                reply_markup=back_keyboard
            )
        else:
            await update.message.reply_text("üîô –¢–∏ –≤–∂–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∞–Ω–∫–µ—Ç–∏.", reply_markup=back_keyboard)

        return ASK_TYPE
    
    user_input = update.message.text
    current_step = context.user_data.get("step", 0)
    print(current_step)

    if current_step > 0:
        key, _ = QUESTIONS3[current_step - 1]

        if key == 'number_of_cars':
            if not is_valid_number(user_input):
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ —á–∏—Å–ª–æ.")
                return ASK_TYPE
        elif key == 'contacts':
            if not is_valid_phone(user_input):
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380XXXXXXXXX): ")
                return ASK_TYPE

        context.user_data[key] = user_input
        print(f"{key}: {user_input}")
    
    if current_step < len(QUESTIONS3):
        key, question = QUESTIONS3[current_step]
        print(current_step)
        await update.message.reply_text(question, reply_markup=back_keyboard)
        context.user_data["step"] = current_step + 1
        return ASK_TYPE
    else:
        await update.message.reply_text("–î—è–∫—É—é, –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        context.user_data["step"] = 0
        print("Final data: ", context.user_data)
        
        user_id = update.effective_user.id
        type_of_delivery = context.user_data.get("type_of_delivery")
        cerrier_or_customer = context.user_data.get("cerrier_or_customer")

        if cerrier_or_customer == "–ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫":
            app_type = "carrier"
        elif cerrier_or_customer == "–ó–∞–º–æ–≤–Ω–∏–∫":
            app_type = "international" if type_of_delivery == "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç" else "domestic"
        else:
            app_type = "unknown"

        data_to_save = {k: v for k, v in context.user_data.items() if k not in ["cerrier_or_customer", "type_of_delivery", "step"]}

        print(app_type)
            
        save_application(user_id, app_type, data_to_save)
        await send_to_broker(user_id, app_type, data_to_save)

        await after_application(update, context)
        return AFTER_APPLICATION

async def AskNext2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.edited_message:
        await update.edited_message.reply_text("‚ö†Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ.")
        return ASK_TYPE2

    QUESTIONS = context.user_data.get("QUESTIONS")
    
    if not QUESTIONS:
        await update.message.reply_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ—é /start.")
        return ConversationHandler.END
    
    if update.message.text == "‚è™ –ù–∞–∑–∞–¥":
        current_step = context.user_data.get("step", 0)

        if current_step > 1:
            
            context.user_data["step"] = current_step - 1
            prev_key, prev_question = QUESTIONS[current_step - 2]
            await update.message.reply_text(
                f"üîô –î–æ–±—Ä–µ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å.\n\n{prev_question}",
                reply_markup=back_keyboard
            )
        else:
            await update.message.reply_text("üîô –¢–∏ –≤–∂–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∞–Ω–∫–µ—Ç–∏.", reply_markup=back_keyboard)

        return ASK_TYPE2

    user_input = update.message.text

    if not update.message or not update.message.text:
        await update.effective_chat.send_message("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç.")
        return ASK_TYPE2
    
    current_step = context.user_data.get("step", 0)
    
    if current_step > 0:
        key, _ = QUESTIONS[current_step - 1]
        
        if key in ["weight", "capacity"]:
            if not is_valid_number(user_input):
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ —á–∏—Å–ª–æ.")
                return ASK_TYPE2
        elif key == "contacts":
            if not is_valid_phone(user_input):
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380XXXXXXXXX)")
                return ASK_TYPE2
        elif key == "datetime":
            if not is_valid_datetime(user_input):
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•.")
                return ASK_TYPE2
            
        context.user_data[key] = user_input
        print(f"{key}: {user_input}")
    
    if current_step < len(QUESTIONS):
        key, question = QUESTIONS[current_step]
        await update.message.reply_text(question, reply_markup=back_keyboard)
        context.user_data["step"] = current_step + 1
        return ASK_TYPE2
    else:
        await update.message.reply_text("–î—è–∫—É—é, –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        context.user_data["step"] = 0
        print("Final data: ", context.user_data)

        user_id = update.effective_user.id
        type_of_delivery = context.user_data.get("type_of_delivery")
        cerrier_or_customer = context.user_data.get("cerrier_or_customer")

        if cerrier_or_customer == "–ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫":
            app_type = "carrier"
        elif cerrier_or_customer == "–ó–∞–º–æ–≤–Ω–∏–∫":
            app_type = "international" if type_of_delivery == "–Ü–º–ø–æ—Ä—Ç/–ï–∫—Å–ø–æ—Ä—Ç" else "domestic"
        else:
            app_type = "unknown"

        data_to_save = {k: v for k, v in context.user_data.items() if k not in ["cerrier_or_customer", "type_of_delivery", "step", "QUESTIONS"]}

        print(app_type)
            
        save_application(user_id, app_type, data_to_save)
        await send_to_broker(user_id, app_type, data_to_save)

        await after_application(update, context)
        return AFTER_APPLICATION    

async def after_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —â–µ —Ä–∞–∑"], ["–ó–∞–≤–µ—Ä—à–∏—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, one_time_keyboard=True, resize_keyboard=True
    )

    await update.message.reply_text(
        "–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=reply_markup
    )

    context.user_data["step"] = 0
    context.user_data["cerrier_or_customer"] = None
    context.user_data["type_of_delivery"] = None
    
    return AFTER_APPLICATION

async def handle_after_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    if update.edited_message:
        await update.edited_message.reply_text("‚ö†Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ.")
        return ASK_TYPE
    
    choice = update.message.text
    if choice == "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —â–µ —Ä–∞–∑":
        return await start(update, context)
    elif choice == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await update.message.reply_text("–î—è–∫—É—é! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π.")
        return AFTER_APPLICATION
    
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and end the whole conversation"""
    await update.message.reply_text("–†–æ–∑–º–æ–≤–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞")
    context.user_data.clear()
    return ConversationHandler.END

def main():
    """run the bot."""

    application = ApplicationBuilder().token(telegram_token).build()
    print("Bot connected.")
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_CARRIER_OR_CUSTOMER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, SelectCarrierOrCustomer)
            ],
            HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_2: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, HandleTypeOfDeliveryAskTYPE2)
            ],
            HANDLE_TYPE_OF_DELIVERY_ASK_TYPE_1: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, HandleTypeOfDeliveryAskTYPE1)
            ],
            ASK_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, AskNext1)
            ],
            ASK_TYPE2: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, AskNext2)
            ],
            AFTER_APPLICATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_after_application)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    while True:
        try: 
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            print("Bot connected.")
        except (NetworkError, TimedOut):
            print("Network error, retrying in 5 seconds...")
            time.sleep(5)
        except Exception as e:
            print(f"Unexpected error: {e}")
            time.sleep(5)
    
if __name__ == "__main__":
    main()
