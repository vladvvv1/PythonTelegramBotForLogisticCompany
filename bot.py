from telegram.ext import ApplicationBuilder
from handlers import start, carrier, shipper, admin
from config import telegram_token

if __name__ == "__main__":
    app = ApplicationBuilder().token(telegram_token).build()

    start.register_handlers(app)
    carrier.get_carrier_handler(app)
    # shipper.register_handlers(app)
    # admin.register_handlers(app)

    print("Bot have started...")
    app.run_polling()

# from telegram import Update, ReplyKeyboardMarkup
# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# # –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏
# CHOOSING_ROLE, CARRIER_LOCATION, CARRIER_DATE, CARRIER_VEHICLE, CARRIER_NOTES, \
# SHIPPER_CARGO, SHIPPER_PICKUP, SHIPPER_DATE, SHIPPER_NOTES = range(9)

# # –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
# user_data = {}

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     keyboard = [["üöõ –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫", "üì¶ –ó–∞–º–æ–≤–Ω–∏–∫"]]
#     markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
#     await update.message.reply_text("–í—ñ—Ç–∞—é! –í–∏ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫ —á–∏ –∑–∞–º–æ–≤–Ω–∏–∫?", reply_markup=markup)
#     return CHOOSING_ROLE

# async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     role = update.message.text
#     user_data[update.effective_user.id] = {"role": role}

#     # –î–∞–ª—ñ –æ–±–∏—Ä–∞—î–º–æ —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è
#     keyboard = [["üá∫üá¶ –ü–æ –£–∫—Ä–∞—ó–Ω—ñ", "üåç –Ü–º–ø–æ—Ä—Ç", "üì§ –ï–∫—Å–ø–æ—Ä—Ç"]]
#     markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
#     await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è:", reply_markup=markup)
#     return CARRIER_LOCATION if role == "üöõ –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫" else SHIPPER_CARGO

# # --- –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫ ---
# async def carrier_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["route_type"] = text
#     await update.message.reply_text("–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–∞—à–µ –∞–≤—Ç–æ?")
#     return CARRIER_DATE

# async def carrier_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["location"] = text
#     await update.message.reply_text("–ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ –≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—å? (–¥–∞—Ç–∞/—á–∞—Å)")
#     return CARRIER_VEHICLE

# async def carrier_vehicle(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["available_from"] = text
#     await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç–∏–ø –∞–≤—Ç–æ —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ä–æ–∑–º—ñ—Ä–∏/—Ç–æ–Ω–Ω–∞–∂)")
#     return CARRIER_NOTES

# async def carrier_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["vehicle_info"] = text
#     await update.message.reply_text("–î–æ–¥–∞–π—Ç–µ –æ—Å–æ–±–ª–∏–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ù–µ–º–∞—î'")
#     return ConversationHandler.END

# # --- –ó–∞–º–æ–≤–Ω–∏–∫ ---
# async def shipper_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["route_type"] = text
#     await update.message.reply_text("–Ø–∫–∏–π –≤–∞–Ω—Ç–∞–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏?")
#     return SHIPPER_PICKUP

# async def shipper_pickup(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["cargo_name"] = text
#     await update.message.reply_text("–ó–≤—ñ–¥–∫–∏ –∑–∞–±—Ä–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂?")
#     return SHIPPER_DATE

# async def shipper_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["pickup_location"] = text
#     await update.message.reply_text("–ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–±—Ä–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂?")
#     return SHIPPER_NOTES

# async def shipper_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text
#     user_data[update.effective_user.id]["delivery_date"] = text
#     await update.message.reply_text("–û—Å–æ–±–ª–∏–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏? –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å '–ù–µ–º–∞—î'")
#     return ConversationHandler.END

# # --- –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–º—ñ–Ω–∏ ---
# async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
#     return ConversationHandler.END

# # --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
# if __name__ == "__main__":
#     TOKEN = "8298873354:AAHtQ3HO8udt8Qx2h0UlzGgjoRbgPjjsl_w"
#     app = ApplicationBuilder().token(TOKEN).build()

#     conv_handler = ConversationHandler(
#         entry_points=[CommandHandler("start", start)],
#         states={
#             CHOOSING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_role)],

#             # –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫
#             CARRIER_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, carrier_info)],
#             CARRIER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, carrier_date)],
#             CARRIER_VEHICLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, carrier_vehicle)],
#             CARRIER_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, carrier_notes)],

#             # –ó–∞–º–æ–≤–Ω–∏–∫
#             SHIPPER_CARGO: [MessageHandler(filters.TEXT & ~filters.COMMAND, shipper_info)],
#             SHIPPER_PICKUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, shipper_pickup)],
#             SHIPPER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, shipper_date)],
#             SHIPPER_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, shipper_notes)],
#         },
#         fallbacks=[CommandHandler("cancel", cancel)],
#     )

#     app.add_handler(conv_handler)
#     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
#     app.run_polling()
